# main.py
# Project title: PyJack Hold 'em
# Your name: Anna Calkins
# Your partner's name: Mirabelle Brown

import random
import sys


cards = ['Ace of hearts', 'Ace of spades', 'Ace of clubs', 'Ace of diamonds',
        '2 of hearts', '2 of spades', '2 of clubs', '2 of diamonds',
        '3 of hearts', '3 of spades', '3 of clubs', '3 of diamonds',
        '4 of hearts', '4 of spades', '4 of clubs', '4 of diamonds',
        '5 of hearts', '5 of spades', '5 of clubs', '5 of diamonds',
        '6 of hearts', '6 of spades', '6 of clubs', '6 of diamonds',
        '7 of hearts', '7 of spades', '7 of clubs', '7 of diamonds',
        '8 of hearts', '8 of spades', '8 of clubs', '8 of diamonds',
        '9 of hearts', '9 of spades', '9 of clubs', '9 of diamonds',
        '10 of hearts', '10 of spades', '10 of clubs', '10 of diamonds',
        'Jack of hearts', 'Jack of spades', 'Jack of clubs', 'Jack of diamonds',
        'Queen of hearts', 'Queen of spades', 'Queen of clubs', 'Queen of diamonds',
        'King of hearts', 'King of spades', 'King of clubs', 'King of diamonds',
        ]
#OPENING COMMAND LINE (INTRODUCTION
print()
print("Hello, welcome to Mirabelle and Anna's PYJACK HOLD'EM. A modern twist of the classic Black Jack and Texas Hold'em games in one, coded using Python.")
print()
name = input("Please enter your player name: ")
print()
print(f"Hello, {name}. Type YES if you are ready to continue. Type NO if not.")
y_n = input().upper()
if y_n == 'YES':
   print("Great! Let's get started!")
else:
   print("Bummer! Just type YES whenever you're ready to get started.")
   r_u_ready = input()
   if r_u_ready == 'YES':
       print("Great! Let's get started!")


big_blind = input(f"The computer has chosen a small blind of $1. {name}, please enter a big blind: ")
print(f'$1/${big_blind}')


random.shuffle(cards)
hand_player = cards[0:2]
cards.pop(0)
cards.pop(0)
hand_computer = cards[0:2]
cards.pop(0)
cards.pop(0)
print()
print(f"{name}, the card distribution will now begin.")
print()


user_input = input("Press Enter to pull your cards: ")
print()
if user_input == "":
   print(f'{name}\'s Hand: {hand_player}')


print()


user_input = input("Press Enter to see the three cards displayed on the table: ")
print()
if user_input == "":
   cards_displayed = cards[0:3]
   cards.pop(0)
   cards.pop(0)
   cards.pop(0)
   print(f'Cards on the Table: {cards_displayed}')


print()
print()
print(f'WELCOME TO ROUND 1, {name}.')
print()
print("Do you have what it takes?")
print()
#Round 1
user_input = input("Type 1 to fold, type any key to move on: ")
if user_input == "1":
   sys.exit("Good Game! But you folded at Round 1, while the computer kept going, so ... you lose!")
else:
   print("Cool! The Game continues!")


print()




print(f'WELCOME TO ROUND 2, {name}.')
print()
print("So close, yet so far.")
print()
# round 2
user_input = input("Press Enter to continue to round 2: ")
if user_input == "":
   cards_displayed.append(cards[0])
   card_added = cards[0]
   cards.pop(0)
   print(f'Player Hand: {hand_player}')
   print(f'Cards on the Table now: {cards_displayed}')
   print(f'Added Card: {card_added}')


user_input = input("Type 1 to fold, type any key to move on: ")
if user_input == "1":
   sys.exit("Good Game! But you folded at Round 2, meanwhile the computer kept going, so ... you lose!")
else:
   print("Cool! The Game continues!")


print()




# round 3
print(f'WELCOME TO ROUND 3, {name}.')
print()
print("This is the final stretch.")
print()


user_input = input("Press Enter to continue to round 3: ")
if user_input == "":
   cards_displayed.append(cards[0])
   card_added = cards[0]
   cards.pop(0)
   print(f'Player Hand: {hand_player}')
   print(f'Cards on the Table now: {cards_displayed}')
   print(f'Added Card: {card_added}')


print()
user_input = input("Type 1 to fold, type any key to move on: ")
if user_input == "1":
   sys.exit("Good Game! Both you and the computer folded at Round 3, so ... it's a tie!")
else:
   print("Cool! The Game continues!")




print()
print("Results:")
print(f'{name}\'s hand: {hand_player}')
print(f'Computer hand: {hand_computer}')
print(f"Cards on table: {cards_displayed}")


combined_list = []
combined_list = cards_displayed + hand_player
combined_comp_list = []
combined_comp_list = cards_displayed + hand_computer










computer_score = 0
computer_score = int(computer_score)
person_score = int()
person_score = int(person_score)










def check_for_combos(combined_list):
   list_of_counts = []
   list_of_counts = [0] * 13


   countA = 0
   count2 = 0
   count3 = 0
   count4 = 0
   count5 = 0
   count6 = 0
   count7 = 0
   count8 = 0
   count9 = 0
   count10 = 0
   countJ = 0
   countQ = 0
   countK = 0
   countHearts = 0
   countClubs = 0
   countSpades = 0
   countDiamonds = 0


   for card in combined_list:
       if 'Ace' in card:
           countA += 1
           list_of_counts[12] += 1
       if '2' in card:
           count2 += 1
           list_of_counts[0] += 1
       if '3' in card:
           count3 += 1
           list_of_counts[1] += 1
       if '4' in card:
           count4 += 1
           list_of_counts[2] += 1
       if '5' in card:
           count5 += 1
           list_of_counts[3] += 1
       if '6' in card:
           count6 += 1
           list_of_counts[4] += 1
       if '7' in card:
           count7 += 1
           list_of_counts[5] += 1
       if '8' in card:
           count8 += 1
           list_of_counts[6] += 1
       if '9' in card:
           count9 += 1
           list_of_counts[7] += 1
       if '10' in card:
           count10 += 1
           list_of_counts[8] += 1
       if 'J' in card:
           countJ += 1
           list_of_counts[9] += 1
       if 'Q' in card:
           countQ += 1
           list_of_counts[10] += 1
       if 'K' in card:
           countK += 1
           list_of_counts[11] += 1
       if 'hearts' in card:
           countHearts += 1
       if 'clubs' in card:
           countClubs += 1
       if 'diamonds' in card:
           countDiamonds += 1
       if 'spades' in card:
           countSpades += 1


   def is_4_of_a_kind(combined_list):
       if countA == 4 or count2 == 4 or count3 == 4 or count4 == 4 or count5 == 4 or count6 == 4 or count7 == 4 or count8 == 4 or count9 == 4 or count10 == 4 or countJ == 4 or countQ == 4 or countK == 4:
           return True
       else:
           return False


   def is_3_of_a_kind(combined_list):
       if countA == 3 or count2 == 3 or count3 == 3 or count4 == 4 or count5 == 3 or count6 == 3 or count7 == 3 or count8 == 3 or count9 == 3 or count10 == 3 or countJ == 3 or countQ == 3 or countK == 3:
           return True
       else:
           return False


   def is_just_pair(combined_list):
       if countA == 2 or count2 == 2 or count3 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
           return True
       else:
           return False


   def is_2_pair(combined_list):
       if countA == 2:
           if count2 == 2 or count3 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count2 == 2:
           if countA == 2 or count3 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count3 == 2:
           if countA == 2 or count2 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count4 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count5 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count6 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count7 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count8 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count7 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count9 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count10 == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if countJ == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or count7 == 2 or countQ == 2 or countK == 2:
               return True
       if countQ == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or count7 == 2 or countK == 2:
               return True
       if countK == 2:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or count7 == 2:
               return True
       else:
           return False


   def is_full_house(combined_list):
       if countA == 3:
           if count2 == 2 or count3 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count2 == 3:
           if countA == 2 or count3 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count3 == 3:
           if countA == 2 or count2 == 2 or count4 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count4 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count5 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count6 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count7 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count8 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count7 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count9 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if count10 == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count7 == 2 or count8 == 2 or count9 == 2 or countJ == 2 or countQ == 2 or countK == 2:
               return True
       if countJ == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or count7 == 2 or countQ == 2 or countK == 2:
               return True
       if countQ == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or count7 == 2 or countK == 2:
               return True
       if countK == 3:
           if countA == 2 or count2 == 2 or count3 == 4 or count4 == 2 or count5 == 2 or count6 == 2 or count8 == 2 or count9 == 2 or count10 == 2 or countJ == 2 or countQ == 2 or count7 == 2:
               return True
       else:
           return False


   def is_flush(combined_list):
       if countHearts >= 5:
           return True
       if countClubs >= 5:
           return True
       if countDiamonds >= 5:
           return True
       if countSpades >= 5:
           return True
       else:
           return False


   def is_straight(combined_list):
       for char in range(9):
           if list_of_counts[char] >= 1 and list_of_counts[char + 1] >= 1 and list_of_counts[char + 2] >= 1 and \
                   list_of_counts[char + 3] >= 1 and list_of_counts[char + 4] >= 1:
               return True
           else:
               return False


   def highest_card(combined_list):
       if countK >= 1:
           return "King is the highest card."
       elif countQ >= 1:
           return "Queen is the highest card."
       elif countJ >= 1:
           return "Jack is the highest card."
       elif count10 >= 1:
           return "10 is the highest card."
       elif count9 >= 1:
           return "9 is the highest card."
       elif count8 >= 1:
           return "8 is the highest card."
       elif count7 >= 1:
           return "7 is the highest card."
       elif count6 >= 1:
           return "6 is the highest card."
       elif count5 >= 1:
           return "5 is the highest card."
       elif count4 >= 1:
           return "4 is the highest card."
       elif count3 >= 1:
           return "3 is the highest card."
       elif count2 >= 1:
           return "2 is the highest card."
       else:
           return "Ace is the highest card."


   def is_straight_flush(combined_list):
       for char in range(9):
           if list_of_counts[char] >= 1 and list_of_counts[char + 1] >= 1 and list_of_counts[char + 2] >= 1 and \
                   list_of_counts[char + 3] >= 1 and list_of_counts[char + 4] >= 1:
               if 'hearts' in combined_list[char] and 'hearts' in combined_list[char + 1] and 'hearts' in \
                       combined_list[
                           char + 2] and 'hearts' in combined_list[char + 3] and 'hearts' in combined_list[char + 4]:
                   return True
               elif 'clubs' in combined_list[char] and 'clubs' in combined_list[char + 1] and 'clubs' in combined_list[
                   char + 2] and 'clubs' in combined_list[char + 3] and 'clubs' in combined_list[char + 4]:
                   return True
               elif 'spades' in combined_list[char] and 'spades' in combined_list[char + 1] and 'spades' in \
                       combined_list[
                           char + 2] and 'spades' in combined_list[char + 3] and 'spades' in combined_list[char + 4]:
                   return True
               elif 'diamonds' in combined_list[char] and 'diamonds' in combined_list[char + 1] and 'diamonds' in \
                       combined_list[char + 2] and 'diamonds' in combined_list[char + 3] and 'diamonds' in \
                       combined_list[
                           char + 4]:
                   return True
               else:
                   return False
           else:
               return False


   def is_royal_flush(combined_list):
       if 'Ace hearts' in combined_list and 'King hearts' in combined_list and 'Queen hearts' in combined_list and 'Jack hearts' in combined_list and '10 hearts' in combined_list:
           return True
       elif 'Ace spades' in combined_list and 'King spades' in combined_list and 'Queen spades' in combined_list and 'Jack spades' in combined_list and '10 spades' in combined_list:
           return True
       elif 'Ace clubs' in combined_list and 'King clubs' in combined_list and 'Queen clubs' in combined_list and 'Jack clubs' in combined_list and '10 clubs' in combined_list:
           return True
       elif 'Ace diamonds' in combined_list and 'King diamonds' in combined_list and 'Queen diamonds' in combined_list and 'Jack diamonds' in combined_list and '10 diamonds' in combined_list:
           return True
       else:
           return False


   def final_check(combined_list):
       score = 0
       if is_royal_flush(combined_list):
           score = score + 10
           return "Congratulations! You have a royal flush! That's insane!", score
       elif is_straight_flush(combined_list):
           score = score + 9
           return "Congratulations! You have a straight flush!", score
       elif is_4_of_a_kind(combined_list):
           score = score + 8
           return "Congratulations! You have 4 of a kind!", score
       elif is_full_house(combined_list):
           score = score + 7
           return "Congratulations! You have a full house!", score
       elif is_flush(combined_list):
           score = score + 6
           return "Nice! You have a flush!", score
       elif is_straight(combined_list):
           score = score + 5
           return "Nice! You have a straight!", score
       elif is_3_of_a_kind(combined_list):
           score = score + 4
           return "Wow! You have three of a kind!", score
       elif is_2_pair(combined_list):
           score = score + 3
           return "Wow! You have two pairs!", score
       elif is_just_pair(combined_list):
           score = score + 2
           return "Cool. You have a pair.", score
       else:
           score = score + 1
           return "Nice try, all you have is a high card...", score
   return final_check(combined_list)




print()
user_input = input("Press Enter to see final game score: ")
print()




#ending
if user_input == "":
   print(f"{name}'s final result:")
   print()
   message, person_score = check_for_combos(combined_list)
   print(message)
   print()
   print(f"{name}'s Score = {person_score}")
   print()
   print("The computer, on the other hand, was told:")
   print()
   message, computer_score = check_for_combos(combined_comp_list)
   print(message)
   print()
   print(f"Computer's Score = {computer_score}")
   print()
   print("Therefore...")
   print()
   if person_score > computer_score:
       print("Congratulations! You won, not to mention you beat a computer. INCREDIBLE!!!")
   elif person_score < computer_score:
       print("Congratulations! You tried, but you have lost! Nice attempt at trying to beat the computer though!")
   else:
       print("Congratulations! You guys tied!")
